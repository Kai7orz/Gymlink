openapi: 3.0.0
info:
  version: 1.0.0
  title: Sample API
  description: >-
    A sample API that uses a sample-site as an example to demonstrate features in
    the OpenAPI 3.0 specification
servers:
  - url: 'http://localhost:8003'
paths:
# 新規登録画面
  /users:
    post:
      summary: ユーザー登録
      description: Firebase認証後にバックエンドに登録する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                avatar_url:
                  type: string
      responses:
        "201":
          description: ユーザー作成成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: 既に存在するUIDで登録しようとした

  # ログイン画面
  /login:
    post:
      summary: ログイン(Firebaseトークン検証)
      description: フロントエンドから渡されるFirebase IDトークンを検証し、ユーザーを返す
      security:
        - bearerAuth: []
      responses:
        "200":
          description: ユーザーが存在する
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: ユーザーが存在しない
        "401":
          description: トークンが無効または期限切れ

  /user_profiles/{user_id}:
    get:
      description: >
        Return user profile
      responses:
        '200':
          description: user profile response
          content:
            application/json:
              schema:  
                $ref: '#/components/schemas/UserProfile'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      description: >
        Return user profile
      responses:
        '200':
          description: user profile response
          content:
            application/json:
              schema:  
                type: object
                properties:
                  id: 
                    type: integer
                  name:
                    type: string
                  profile_image:
                    type: string

  /users/{user_id}/records:
    get:
      summary: Get exercises records for a user by ID)
      description: ログインしたユーザの運動投稿記録を取得するための API
      responses:
        '200':
          description: A list of exercises
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Exercise'
  /users/{user_id}/records/{record_id}:
    delete:
      summary: Delete record for a user
      description: 指定した user_id と record_id の運動投稿記録を削除するための API
      responses:
        '200':
          description: Successfully deleted record
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "deleted"
    
  
  /upload:
    post:
      summary: multipart/form-data 形式で 一旦全部 image 以外はstring で送信
      requestBody:
        description: record to add to the user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RawRecord'
      responses:
        200:
          description: Successfully created record
          content:
              application/json:
                schema:
                  example:
                    code: 200 
                    message: "ok"


  /records:
    get:
      summary: Get latest 20 exercises records
      description: /users/exercises とは異なり自身の記録ではなく，投稿された記録の最新20件を取り出すための API 
      responses:
        '200':
          description: A list of exercises
          content:
            application/json:
              schema:
                  example:
                    - id: 1
                      user_id: 2
                      user_name: "taro"
                      presigned_image: "/images/sportImage.png"
                      clean_up_time: 45
                      clean_up_date: "2024-01-01T10:00:00Z"
                      comment: "いい感じに動けた"
                      likes_count: 3
                    - id: 2
                      user_name: "yumi"
                      user_id: 22
                      presigned_image: "/images/sportImage.png"
                      clean_up_time: 30
                      clean_up_date: "2024-01-02T10:00:00Z"
                      comment: "疲れた"
                      likes_count: 0
                    - id: 3
                      user_id: 10
                      user_name: "satoshi"
                      presigned_image: "/images/sportImage.png"
                      clean_up_time: 60
                      clean_up_date: "2024-01-03T10:00:00Z"
                      comment: "最高の気分"
                      likes_count: 1

  /likes:
    post:
      summary: 記録に「いいね」する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                record_id:
                  type: integer
      responses:
        "201":
          description: いいね成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  code: { type: integer, example: 201 }
                  message: { type: string, example: "created" }
        
  /likes/{record_id}:
    get:
      summary: 特定の記録にいいねを押したかチェックする
      responses:
        '200':
          description: true or false で返却
          content:
            application/json:
              schema:
                  example:
                    liked: true
    delete:
      summary: 運動記録のいいねを外す
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - in: path
          name: record_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: いいね解除成功

  /follows:
      post:
        summary: フォローする
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  follower_id:
                    type: integer
                  followed_id:
                    type: integer
        responses:
          "201":
            description: フォロー成功
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    code: { type: integer, example: 201 }
                    message: { type: string, example: "created" }
          
  /follows/{user_id}:
    get:
      summary: user_id をフォローしているか確認する
      responses:
        '200':
          description: true or false で返却
          content:
            application/json:
              schema:
                  example:
                    followed: true
  /users/{user_id}/following:
    get:
      summary: user_id の人がフォローしている user id 一覧を返す
      responses:
        '200':
          description: 配列として返却
          content:
            application/json:
             schema:
               type: array
               items:
                 type: integer
               example: [{"userId":1,"userName":"kai"},{"userId:2","userName":"taro"}]
    # 他人のプロフィール画面 & フォロー画面 & フォロワー画面
  /users/unfollows:
    delete:
      summary: フォロー解除
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                follower_id:
                  type: integer
                followed_id:
                  type: integer
      responses:
        "200":
          description: フォロー解除成功
  # キャラクター画面
  /user_characters/{user_id}:
    get:
      summary: ユーザーのキャラクター情報を取得
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: キャラクター情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCharacter"

    


components:
  schemas:
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1
        name:
          type: "string"
          example: "Taro"
    
    UserProfile:
      type: "object"
      properties:
        id:
          type: "integer" 
          format: "int64"
          example: 1
        name:
          type: "string"
          example: "Taro"
        profile_image:
          type: "string"
          example: "/images/test.png"        
        follow_count:
          type: "integer"
          format: "int64"
          example: 4
        follower_count:
          type: "integer"
          format: "int64"
          example: 60

    Exercise:
      type: "object"
      required:
        - "id" 
        - "presigned_image" 
        - "clean_up_time" 
      properties:
        id:
          type: "integer"
          format: "int64" 
          example: 1 
        user_id:
          type: "integer"
          example: 20
        user_name:
          type: "string"
          example: "ABC"
        presigned_image:
          type: "string" 
          example:  '/images/sportImage.png'
        clean_up_time:
          type: "integer"
          format: "int64" 
          example: 45
        clean_up_date:
          type: "string"
          format: "date-time"
          example: "2024-01-01T10:00:00Z"
        comment:
          type: "string"
          example: "いい感じに動けた"
        likes_count:
          type: "integer"
          example: 3

    RawRecord:
      type: "object" 
      required:
        - "object_key" 
        - "clean_up_time" 
      properties:
        object_key:
          type: "string"  
          example: "/images/test.png"
        clean_up_time: 
          type: "string"
          example: "20" 
        clean_up_date:
          type: "string"
          example: "2024-01-01T10:00:00Z"
        comment:
          type: "string"
          example: "いい感じに動けた"

    Team:
      type: object
      required:
        - teamName
        - teamTarget
        - member
      properties:
        teamName:
          type: string
          description: チーム名
          example: DAKAI
        teamTarget:
          type: integer
          description: チームの目標
          example: 10
        member:
          type: array
          description: チームメンバー一覧
          items:
            type: object
            required: [name, profile_image, exercise_count]
            properties:
              name:
                type: string
                description: メンバー名
                example: taro
              profileImage:
                type: string
                description: プロフィール画像 URL
                example: /images/test.png
              exerciseCount:
                type: integer
                description: メンバーの運動投稿回数
                example: 3
        
    UserCharacter:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        character_id:
          type: integer
        level:
          type: integer
        current_points:
          type: integer
        required_points:
          type: integer
        character_animation:
          type: string
          example: /assets/animations/huwaData.json
          
    Error:
      type: "object"
      properties:
        code:
          type: "integer"
          format: "int32"
        type:
          type: "string"
        message:
          type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
