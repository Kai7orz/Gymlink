openapi: 3.0.1
info:
  title: ジムリンク
  version: v1
  description: 運動記録型SNSアプリのAPI仕様

servers:
  - url: http://localhost:3000

paths:
  # 新規登録画面
  /users:
    post:
      summary: ユーザー登録
      description: Firebase認証後にバックエンドに登録する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firebase_uid:
                  type: string
                name:
                  type: string
                email:
                  type: string
                avatar_url:
                  type: string
      responses:
        "201":
          description: ユーザー作成成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: 既に存在するUIDで登録しようとした

  # ログイン画面
  /login:
    post:
      summary: ログイン(Firebaseトークン検証)
      description: フロントエンドから渡されるFirebase IDトークンを検証し、ユーザーを返す
      security:
        - bearerAuth: []
      responses:
        "200":
          description: ユーザーが存在する
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: ユーザーが存在しない
        "401":
          description: トークンが無効または期限切れ

  # アプリの内部的なユーザー情報を参照・管理する
  /users/{id}:
    get:
      summary: ユーザー情報取得
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ユーザー情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  # 運動記録画面 & 投稿共有画面
  /exercise_records:
    post:
      summary: 運動記録を投稿する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                exercise_time:
                  type: integer
                  example: 30
                content:
                  type: string
                  example: "ランニング5km"
                recorded_date:
                  type: string
                  format: date
      responses:
        "201":
          description: 記録作成成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExerciseRecord"

    get:
      summary: 運動記録一覧を取得する
      parameters:
        - in: query
          name: user_id
          schema:
            type: integer
          description: 特定ユーザーの記録を取得
      responses:
        "200":
          description: 運動記録一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExerciseRecord"

  /teams:
    post:
      summary: チームを作成する
      description: 1か月ごとにユーザーを所属させる
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                month:
                  type: string
                  example: "2025-09"
                target_duration:
                  type: integer
                  example: 600
      responses:
        "201":
          description: チーム作成成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Team"

    # 将来的に全チームを一覧表示するページを作る場合、追加
    # get:
    #   summary: チーム一覧を取得
    #   responses:
    #     "200":
    #       description: チーム一覧
    #       content:
    #         application/json:
    #           schema:
    #             type: array
    #             items:
    #               $ref: "#/components/schemas/Team"

  # 他人のプロフィール画面 & フォロワー画面
  /follows:
    post:
      summary: フォローする
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                follower_id:
                  type: integer
                followed_id:
                  type: integer
      responses:
        "201":
          description: フォロー成功

  # 他人のプロフィール画面 & フォロー画面 & フォロワー画面
  /follows/unfollow:
    post:
      summary: フォロー解除
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                follower_id:
                  type: integer
                followed_id:
                  type: integer
      responses:
        "200":
          description: フォロー解除成功

  # ホーム画面 & 投稿共有画面
  /likes:
    post:
      summary: 運動記録に「いいね」する
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                exercise_record_id:
                  type: integer
      responses:
        "201":
          description: いいね成功

  /likes/{user_id}/{exercise_record_id}:
    delete:
      summary: 運動記録のいいねを外す
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
        - in: path
          name: exercise_record_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: いいね解除成功

  # プロフィール画面
  /user_profiles/{user_id}:
    get:
      summary: ユーザーのプロフィールを取得
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: プロフィール取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"

  # キャラクター選択画面
  # /user_characters:
  #   post:
  #     summary: ユーザーのキャラクターを選択する
  #     description: 新規登録後に1体キャラクターを選ぶ
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               user_id:
  #                 type: integer
  #               character_id:
  #                 type: integer
  #       responses:
  #         "201":
  #           description: キャラクター選択成功
  #           content:
  #             application/json:
  #               schema:
  #                 $ref: "#/components/schemas/UserCharacter"

  # キャラクター画面
  /user_characters/{user_id}:
    get:
      summary: ユーザーのキャラクター情報を取得
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: キャラクター情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCharacter"

  /user_characters/{user_id}/gain_points:
    post:
      summary: キャラクターにポイントを付与する
      description: 運動記録達成時などに呼ばれる
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                points:
                  type: integer
                  example: 10
      responses:
        "200":
          description: ポイント加算後のキャラクター情報
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCharacter"

  /user_characters/{user_id}/level_up:
    post:
      summary: キャラクターをレベルアップさせる
      description: 必要ポイントを超えたときに発火
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: レベルアップ成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCharacter"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        firebase_uid:
          type: string
        name:
          type: string
        email:
          type: string
        avatar_url:
          type: string

    ExerciseRecord:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        exercise_time:
          type: integer
        content:
          type: string
        recorded_date:
          type: string
          format: date

    Team:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        month:
          type: string
          example: "2025-09"
        target_duration:
          type: integer
          example: 600

    UserCharacter:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        character_id:
          type: integer
        level:
          type: integer
        current_points:
          type: integer

    UserProfile:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        character:
          $ref: "#/components/schemas/Character"

    Character:
      type: object
      properties:
        name:
          type: string
        base_image:
          type: string
